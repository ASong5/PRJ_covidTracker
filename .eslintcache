[{"D:\\PRJ_covidTracker\\src\\index.js":"1","D:\\PRJ_covidTracker\\src\\App.js":"2","D:\\PRJ_covidTracker\\src\\context\\canadaContext.js":"3","D:\\PRJ_covidTracker\\src\\context\\globalContext.js":"4","D:\\PRJ_covidTracker\\src\\pages\\GlobalCovidPage.js":"5","D:\\PRJ_covidTracker\\src\\pages\\CanadaCovidPage.js":"6","D:\\PRJ_covidTracker\\src\\actions\\canadaActions.js":"7","D:\\PRJ_covidTracker\\src\\utils\\helpers.js":"8","D:\\PRJ_covidTracker\\src\\reducer\\canadaReducer.js":"9","D:\\PRJ_covidTracker\\src\\reducer\\globalReducer.js":"10","D:\\PRJ_covidTracker\\src\\actions\\globalActions.js":"11","D:\\PRJ_covidTracker\\src\\components\\InfoBox.js":"12","D:\\PRJ_covidTracker\\src\\components\\LineGraph.js":"13","D:\\PRJ_covidTracker\\src\\components\\Table.js":"14","D:\\PRJ_covidTracker\\src\\components\\NavBar.js":"15","D:\\PRJ_covidTracker\\src\\components\\Map\\Map.js":"16","D:\\PRJ_covidTracker\\src\\components\\Map\\ChangeView.js":"17"},{"size":486,"mtime":1616313276457,"results":"18","hashOfConfig":"19"},{"size":504,"mtime":1616313276440,"results":"20","hashOfConfig":"19"},{"size":1948,"mtime":1616316480881,"results":"21","hashOfConfig":"19"},{"size":3698,"mtime":1616313276455,"results":"22","hashOfConfig":"19"},{"size":3967,"mtime":1616315638199,"results":"23","hashOfConfig":"19"},{"size":4086,"mtime":1616316175106,"results":"24","hashOfConfig":"19"},{"size":338,"mtime":1616313276441,"results":"25","hashOfConfig":"19"},{"size":2448,"mtime":1616316318023,"results":"26","hashOfConfig":"19"},{"size":706,"mtime":1616313276460,"results":"27","hashOfConfig":"19"},{"size":1941,"mtime":1616313276461,"results":"28","hashOfConfig":"19"},{"size":478,"mtime":1616313276442,"results":"29","hashOfConfig":"19"},{"size":917,"mtime":1616313276446,"results":"30","hashOfConfig":"19"},{"size":1750,"mtime":1616313276447,"results":"31","hashOfConfig":"19"},{"size":1446,"mtime":1616316541395,"results":"32","hashOfConfig":"19"},{"size":629,"mtime":1616313276451,"results":"33","hashOfConfig":"19"},{"size":1393,"mtime":1616313276450,"results":"34","hashOfConfig":"19"},{"size":196,"mtime":1616313276448,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14b4qbb",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\PRJ_covidTracker\\src\\index.js",[],"D:\\PRJ_covidTracker\\src\\App.js",[],["73","74"],"D:\\PRJ_covidTracker\\src\\context\\canadaContext.js",["75","76","77","78","79"],"D:\\PRJ_covidTracker\\src\\context\\globalContext.js",[],"D:\\PRJ_covidTracker\\src\\pages\\GlobalCovidPage.js",[],"D:\\PRJ_covidTracker\\src\\pages\\CanadaCovidPage.js",["80"],"import React from \"react\";\r\nimport {\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport { useGlobalContext } from \"../context/globalContext\";\r\nimport { useCanadaContext } from \"../context/canadaContext\";\r\nimport \"../App.css\";\r\nimport Navbar from \"../components/NavBar\";\r\nimport InfoBox from \"../components/InfoBox\";\r\nimport Table from \"../components/Table\";\r\nimport Map from \"../components/Map/Map\";\r\nimport LineGraph from \"../components/LineGraph\";\r\nimport numeral from \"numeral\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nfunction CanadaCovidPage() {\r\n  // const [country, setCountry] = useState(\"worldwide\");\r\n  const {\r\n    country,\r\n    countries,\r\n    countryInput,\r\n    setCountryInput,\r\n    setCaseType,\r\n    caseType,\r\n  } = useGlobalContext();\r\n\r\n  const {\r\n    provinces,\r\n    canada,\r\n    typeInput,\r\n    typeInputData,\r\n    setTypeInput,\r\n  } = useCanadaContext();\r\n\r\n  console.log(typeInput)\r\n  return (\r\n    <div className=\"app\">\r\n      <Navbar />\r\n      <div className=\"container\">\r\n        <div className=\"app__left\">\r\n          <div className=\"app__header\">\r\n            <FormControl className=\"app_dropDown\">\r\n              <Select\r\n                variant=\"outlined\"\r\n                value={countryInput}\r\n                onChange={(e) => setCountryInput(e)}\r\n              >\r\n                <MenuItem value=\"worldwide\" selected=\"selected\">\r\n                  Worldwide\r\n                </MenuItem>\r\n                {countries.map((country, index) => {\r\n                  return (\r\n                    <MenuItem value={country.countryInfo.iso2} key={index}>\r\n                      {country.country}\r\n                    </MenuItem>\r\n                  );\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n          <div className=\"app__stat\">\r\n            <InfoBox\r\n              title=\"Coronavirus Cases\"\r\n              onClick={(e) => setCaseType(\"cases\")}\r\n              active={caseType === \"cases\"}\r\n              cases={numeral(country.todayCases).format(\"0.0a\")}\r\n              total={numeral(country.cases).format(\"0.0a\")}\r\n              isRed\r\n            />\r\n            <InfoBox\r\n              title=\"Recovered People\"\r\n              cases={numeral(country.todayRecovered).format(\"0.0a\")}\r\n              onClick={(e) => setCaseType(\"recovered\")}\r\n              active={caseType === \"recovered\"}\r\n              total={numeral(country.recovered).format(\"0.0a\")}\r\n            />\r\n            <InfoBox\r\n              title=\"Death\"\r\n              cases={numeral(country.todayDeaths).format(\"0.0a\")}\r\n              onClick={(e) => setCaseType(\"deaths\")}\r\n              active={caseType === \"deaths\"}\r\n              total={numeral(country.deaths).format(\"0.0a\")}\r\n              isRed\r\n            />\r\n          </div>\r\n          <Map />\r\n        </div>\r\n        <Card className=\"app__right\">\r\n          <CardContent>\r\n            <div className=\"app__information\">\r\n              <div className=\"app__right__header\">\r\n                <div id=\"title_header\">\r\n                  <h4>Chart Of Provinces Sorted By</h4>\r\n                </div>\r\n                <FormControl className=\"app_dropDown\">\r\n                  <Select\r\n                    variant=\"outlined\"\r\n                    value={typeInput}\r\n                    onChange={(e) => setTypeInput(e)}\r\n                  >\r\n                    {typeInputData.map((typeInput, index) => {\r\n                      return (\r\n                        <MenuItem value={typeInput.type} key={index}>\r\n                          {typeInput.name}\r\n                        </MenuItem>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n              <Table data = {provinces} typeInput = {typeInput}></Table>\r\n              <h4 className=\"graph-header\">{countryInput} line graph</h4>\r\n              <LineGraph />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CanadaCovidPage;\r\n","D:\\PRJ_covidTracker\\src\\actions\\canadaActions.js",[],"D:\\PRJ_covidTracker\\src\\utils\\helpers.js",[],"D:\\PRJ_covidTracker\\src\\reducer\\canadaReducer.js",["81","82","83"],"import {\r\n  LOAD_ALL_PROVINCES_DATA,\r\n  LOAD_CANADA_DATA,\r\n  SET_CASE_TYPE,\r\n  SET_PROVINCE_INPUT,\r\n  LOAD_HISTORICAL_CANADA,\r\n  SET_TYPE_INPUT\r\n} from \"../actions/canadaActions\";\r\n\r\nconst reducer = (state, action) => {\r\n    if (action.type === LOAD_CANADA_DATA){\r\n        return{\r\n            ...state,\r\n            canada: action.payload\r\n        }\r\n    }\r\n\r\n    if (action.type === LOAD_ALL_PROVINCES_DATA){\r\n        return{\r\n            ...state,\r\n            provinces: action.payload\r\n        }\r\n    }\r\n\r\n    if (action.type === SET_TYPE_INPUT){\r\n        return{\r\n          ...state,\r\n          typeInput: action.payload\r\n        }\r\n      }\r\n\r\n    return state;\r\n    \r\n};\r\n\r\nexport default reducer;\r\n","D:\\PRJ_covidTracker\\src\\reducer\\globalReducer.js",[],"D:\\PRJ_covidTracker\\src\\actions\\globalActions.js",[],"D:\\PRJ_covidTracker\\src\\components\\InfoBox.js",[],"D:\\PRJ_covidTracker\\src\\components\\LineGraph.js",[],"D:\\PRJ_covidTracker\\src\\components\\Table.js",["84","85"],"D:\\PRJ_covidTracker\\src\\components\\NavBar.js",[],"D:\\PRJ_covidTracker\\src\\components\\Map\\Map.js",[],"D:\\PRJ_covidTracker\\src\\components\\Map\\ChangeView.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"94","line":2,"column":23,"nodeType":"92","messageId":"93","endLine":2,"endColumn":37},{"ruleId":"90","severity":1,"message":"95","line":7,"column":3,"nodeType":"92","messageId":"93","endLine":7,"endColumn":16},{"ruleId":"90","severity":1,"message":"96","line":8,"column":3,"nodeType":"92","messageId":"93","endLine":8,"endColumn":21},{"ruleId":"90","severity":1,"message":"97","line":9,"column":3,"nodeType":"92","messageId":"93","endLine":9,"endColumn":25},{"ruleId":"90","severity":1,"message":"98","line":33,"column":5,"nodeType":"92","messageId":"93","endLine":33,"endColumn":11},{"ruleId":"90","severity":1,"message":"95","line":4,"column":3,"nodeType":"92","messageId":"93","endLine":4,"endColumn":16},{"ruleId":"90","severity":1,"message":"96","line":5,"column":3,"nodeType":"92","messageId":"93","endLine":5,"endColumn":21},{"ruleId":"90","severity":1,"message":"97","line":6,"column":3,"nodeType":"92","messageId":"93","endLine":6,"endColumn":25},{"ruleId":"90","severity":1,"message":"99","line":4,"column":10,"nodeType":"92","messageId":"93","endLine":4,"endColumn":26},{"ruleId":"90","severity":1,"message":"100","line":5,"column":10,"nodeType":"92","messageId":"93","endLine":5,"endColumn":26},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'buildChartData' is defined but never used.","'SET_CASE_TYPE' is defined but never used.","'SET_PROVINCE_INPUT' is defined but never used.","'LOAD_HISTORICAL_CANADA' is defined but never used.","'canada' is assigned a value but never used.","'useGlobalContext' is defined but never used.","'useCanadaContext' is defined but never used.","no-global-assign","no-unsafe-negation"]